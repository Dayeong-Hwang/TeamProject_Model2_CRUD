<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test">
    <select id="getNickname" resultType="string">
        SELECT member_nickname 
          FROM member
         WHERE 1=1
         <if test="!member_code.equals('') and member_code != null">
		 	AND member_code=#{member_code}
		 </if>
    </select>
    
    <select id="selectMyPageDetail" resultType="map">
        SELECT a.member_code
        	 , a.member_num
        	 , a.member_nickname
        	 , a.member_id, a.member_passwd
        	 , a.member_email
        	 , b.member_info_name
        	 , b.member_info_gender
        	 , b.member_info_phone
        	 , b.member_info_age
        	 , b.member_info_post_code
        	 , b.member_info_address
        	 , b.member_info_address_detail
        	 , b.member_info_ship_post_code
         	 , b.member_info_ship_address
         	 , b.member_info_ship_address_detail
        	 , b.member_info_mypage_img_name
        	 , b.member_info_mypage_real_img_name
        	 , c.grade_name
        	 , d.member_info_detail_like_style
        	 , d.member_info_detail_like_brand
        	 , d.member_info_detail_like_category
        	 , d.member_info_detail_point
        	 , d.member_info_detail_acc_money
        	 , e.member_service_log_code
        	 , e.member_service_log_status
        	 , e.member_service_log_join_date
        	 , e.member_service_log_passwd_change_date
        	 , e.member_service_log_grade_change_date
        	 , e.member_service_log_login_date
        	 , e.member_service_log_order_count
          FROM member AS a
		  JOIN member_info AS b
	    	ON a.member_code = b.member_info_code
		  JOIN grade AS c
			ON b.member_info_grade_code  = c.grade_code
		  JOIN member_info_detail AS d
			ON b.member_info_code = d.member_info_detail_code
		  JOIN member_service_log AS e
			ON d.member_info_detail_code = e.member_service_log_code
		 WHERE 1=1
         <if test="!member_code.equals('') and member_code != null">
		 	AND member_code=#{member_code}
		 </if>
    </select>
    
    <select id="로그인한 회원의 찜한 목록 리스트를 위한 select 구문" resultType="map">
        SELECT b.sell_title
        	 , b.sell_category
        	 , b.sell_category_detail
        	 , b.sell_price
        	 , b.sell_color
        	 , b.sell_size
        	 , b.sell_brand
        	 , c.member_nickname
		  FROM like_list AS a 
		  JOIN sell AS b 
			ON a.like_list_item_num = b.sell_num 
		  JOIN member AS c 
			ON b.sell_member_code = c.member_code 
		 WHERE 1=1
		 <if test="!member_code.equals('') and member_code != null">
		 	AND a.like_list_member_code=#{member_code}
		 </if>
    </select>
    
    <select id="판매글 상세정보를 위한 select 구문" resultType="map">
        SELECT a.sell_title
        	 , a.sell_category
        	 , a.sell_category_detail
        	 , a.sell_content
        	 , a.sell_price
        	 , a.sell_color
        	 , a.sell_brand
        	 , a.sell_write_date
        	 , b.member_nickname
        	 , c.sell_list_item_status
		  FROM sell AS a 
		  JOIN member AS b 
			ON a.sell_member_code = b.member_code
		  JOIN sell_list AS c 
			ON a.sell_num = c.sell_list_num 
		 WHERE 1=1
         <if test="!sell_num.equals('') and sell_num != null">
		 	AND sell_num=#{sell_num}
		 </if>
    </select>
    
    <select id="판매글 상세 정보 출력시 해당하는 이미지파일 목록을 위한 select 구문" resultType="map">
        SELECT * 
          FROM sell_img 
         WHERE 1=1
         <if test="!sell_num.equals('') and sell_num != null">
		 	AND sell_img_num=#{sell_num}
		 </if>
    </select>

    <select id="로그인한 회원의 구매목록 리스트를 위한 select 구문" resultType="map">
        SELECT b.sell_title
        	 , a.buy_list_price
        	 , a.buy_list_item_status
		  FROM buy_list AS a 
		  JOIN sell AS b 
			ON a.buy_list_item_num = b.sell_num 
		 WHERE a.buy_list_member_code=#{member_code}
    </select>

    <select id="공지사항 목록을 위한 select 구문" resultType="map">
        SELECT admin_notice_write_date
        	 , admin_notice_title
        	 , admin_notice_nickname 
          FROM admin_notice
    </select>

    <select id="공지사항 상세정보를 위한 select 구문" resultType="map">
        SELECT * 
          FROM admin_notice
    </select>

    <select id="공지사항 상세정보의 이미지 목록을 위한 select 구문" resultType="map">
        SELECT notice_img_file_detail_name 
          FROM notice_img_file 
         WHERE notice_img_file_num=${admin_notice_num}
    </select>
    
    <select id="checkLogin" resultType="map">
        SELECT a.member_code
        	 , c.grade_name
        	 , a.member_nickname 
          FROM member AS a 
          JOIN member_info AS b 
        	ON a.member_code=b.member_info_code 
          JOIN grade AS c 
        	ON b.member_info_grade_code=c.grade_code 
         WHERE a.member_id=${member_id} AND a.member_passwd=${member_passwd}
    </select>

    <select id="이벤트 상세정보를 위한 select 구문" resultType="map">
        SELECT name, age FROM players WHERE age > #{age} AND name LIKE #{name}
    </select>

    <select id="QnA 목록을 위한 select 구문" resultType="map">
        SELECT name, age FROM players WHERE age > #{age} AND name LIKE #{name}
    </select>

    <select id="QnA 상세정보를 위한 select 구문" resultType="map">
        SELECT name, age FROM players WHERE age > #{age} AND name LIKE #{name}
    </select>

    <select id="getPlayersWhere2" resultType="map">
        SELECT name, age FROM players WHERE age > #{age} AND name LIKE #{name}
    </select>

    <select id="getPlayersWhere2" resultType="map">
        SELECT name, age FROM players WHERE age > #{age} AND name LIKE #{name}
    </select>

    <insert id="insertJoin"> 
        INSERT ALL
          INTO member 
        VALUES (
        	   (SELECT A.NUM FROM (SELECT IFNULL(MAX(CAST(member_num AS UNSIGNED)), 0) + 1 AS num FROM member) A)
        	 , REPLACE(UUID(),'-','')
        	 , ${}
        	 , ${}
        	 , ${}
        	 , ${})
		  INTO member_info (
		  	   member_info_code
		  	 , member_info_gender
		  	 , member_info_age
		  	 , member_info_grade_code)
		VALUES (
			   (SELECT member_code FROM member ORDER BY CAST(member_num AS SIGNED) DESC LIMIT 1))
			 , ${}
			 , ${}
			 , (SELECT grade_code FROM grade WHERE grade_name='Basic'))
		  INTO member_info_detail (
		  	   member_info_detail_code
		  	 , member_info_detail_like_style
		  	 , member_info_detail_like_brand
		  	 , member_info_detail_like_category)
		VALUES (
			   (SELECT member_code FROM member ORDER BY CAST(member_num AS SIGNED) DESC LIMIT 1)
			 , ${}
			 , ${}
			 , ${})
		  INTO member_service_log 
		VALUES (
		 	   (SELECT member_code FROM member ORDER BY CAST(member_num AS SIGNED) DESC LIMIT 1))
		 	 , '정상'
		 	 , REPLACE(now(),'-','')
		 	 , REPLACE(now(),'-','')
		 	 , REPLACE(now(),'-','')
		 	 , REPLACE(now(),'-','')
		 	 , 0)
    </insert>

    <insert id="insertLikeList">
        INSERT INTO like_list (
        	   like_list_member_code
        	 , like_list_item_num) 
        VALUES (
        	   #{member_code}
        	 , #{sell_num}) 
    </insert>

    <insert id="로그인한 회원의 판매글 작성시 insert 구문"> 
        INSERT INTO players (name, age) VALUES (#{name}, #{age}) 
    </insert>

    <insert id="로그인한 회원이 관리자이기 때문에 공지사항작성하는 insert구문"> 
        INSERT INTO players (name, age) VALUES (#{name}, #{age}) 
    </insert>

    <insert id="로그인한 회원이 관리자이기 때문에 이벤트작성하는 insert구문"> 
        INSERT INTO players (name, age) VALUES (#{name}, #{age}) 
    </insert>

    <insert id="로그인한 회원이 QnA를 작성하는 insert구문"> 
        INSERT INTO players (name, age) VALUES (#{name}, #{age}) 
    </insert>

    <insert id="로그인한 회원이 관리자이기 때문에 QnA답글작성하는 insert구문"> 
        INSERT INTO players (name, age) VALUES (#{name}, #{age}) 
    </insert>

    <insert id="insertPlayer"> 
        INSERT INTO players (name, age) VALUES (#{name}, #{age}) 
    </insert>

    <delete id="찜한 목록을 취소했을 때의 delete구문"> 
        DELETE FROM like_list 
         WHERE like_list_member_code = #{member_code}
    </delete>

    <delete id="deletePlayerWhere"> 
        DELETE FROM players WHERE name = #{name} 
    </delete>

    <delete id="deletePlayerWhere"> 
        DELETE FROM players WHERE name = #{name} 
    </delete>

    <delete id="deletePlayerWhere"> 
        DELETE FROM players WHERE name = #{name} 
    </delete>
</mapper>